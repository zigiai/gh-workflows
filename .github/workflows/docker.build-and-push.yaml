name: Build and Push
on:
  workflow_call:
    inputs:
      username:
        description: Docker registry username
        required: false
        type: string
      repository:
        description: Docker repository name (ex. organization)
        required: false
        type: string
      image:
        description: Docker image name (used as the part of full image, ex. repository/image)
        required: false
        type: string
      gcloud-auth:
        description: Use gcloud CLI authentication helper (gcloud auth configure-docker)
        required: false
        type: boolean
      auto-latest:
        description: Automatically add latest tag (for the latest semver, ex. v1.2.3)
        default: true
        required: false
        type: boolean
      cache:
        description: Enable cache for Docker Buildx
        default: false
        required: false
        type: boolean
      push-on-tags:
        description: Auto-push image on tags (refs/tags/)
        required: false
        default: true
        type: boolean
      push-on-default:
        description: Auto-push image on the default branch
        required: false
        default: true
        type: boolean
      push:
        description: Set to true/false to control push unconditionally
        required: false
        type: string
      build-args:
        description: "List of build-time variables"
        required: false
        type: string
      context:
        description: "Build's context is the set of files located in the specified PATH or URL"
        required: false
        type: string
      file:
        description: "Path to the Dockerfile"
        required: false
        type: string
      labels:
        description: "List of metadata for an image"
        required: false
        type: string
      tags:
        description: "List of tags"
        required: false
        type: string
      secret-files:
        description: "List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)"
        required: false
        type: string
      runs-on:
        description: Specifies runs-on for the workflow jobs
        required: false
        type: string
        default: ubuntu-latest
      version:
        description: Specifically defines image version
        required: false
        type: string
      metadata-tags:
        description: docker/metadata-action tags
        required: false
        type: string
        default: |
          type=ref,event=tag
    secrets:
      password:
        description: Docker registry password
        required: false
      secrets:
        description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
        required: false
    outputs:
      version:
        description: Docker image version (a tag)
        value: ${{ jobs.build.outputs.version }}
      published:
        description: Specifies if the docker image has been succesfully pushed (into the registry)
        value: ${{ jobs.build.outputs.published }}
      latest:
        description: Specifies the tag version is the latest one
        value: ${{ jobs.setup.outputs.latest }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set.outputs.image }}
      registry: ${{ steps.set.outputs.registry }}
      username: ${{ steps.set.outputs.username }}
      push: ${{ steps.set.outputs.push }}
      self-hosted: ${{ steps.set.outputs.self-hosted }}
      runs-on: ${{ steps.set.outputs.runs-on }}
      cache-from: ${{ steps.set.outputs.cache-from }}
      cache-to: ${{ steps.set.outputs.cache-to }}
      latest: ${{ steps.set.outputs.latest }}
      metadata-version: ${{ steps.set.outputs.metadata-version }}
    steps:
      -
        if: inputs.auto-latest
        id: current-tag
        uses: dysnix/find-latest-tag@v2
        with:
          regex: '^v\d'
          compare-to: ${{ github.ref }}
          repository: ${{ github.repository }}
      -
        uses: actions/github-script@v5
        id: set
        with:
          script: |
            //js
            const util = require('util');
            const isDefaultBranch = '${{ github.ref }}' == util.format('refs/heads/%s', '${{ github.event.repository.default_branch }}')

            const imageRepo = '${{ github.event.repository.owner.login }}'.toLowerCase()
            const imageName = '${{ github.event.repository.name }}'.toLowerCase().replace(/^docker-/, '')
            const repoPaths = '${{ inputs.repository }}'.split('/')
            // push is a string, if given is a non-empty value
            const pushGiven = "${{ inputs.push }}".toLowerCase()
            const pushOnTags = "${{ inputs.push-on-tags && startsWith(github.ref, 'refs/tags/')}}" == 'true'
            const pushOnDefault = '${{ inputs.push-on-default }}' == 'true' && isDefaultBranch == 'true'

            // Push on tags (and push is not specifically set to false) or always push (push == 'true')
            if (pushGiven == '' && (pushOnTags || pushOnDefault) || pushGiven == 'true') {
              core.setOutput('push', 'true')
            }

            let hostedRunner = false
            let runsOn = '${{ inputs.runs-on }}'
            if ('${{ inputs.runs-on }}'.trim().match(/^(\w|[-.])+$/)) {
              hostedRunner = true
              // safe-escape escape hosted runner
              runsOn = '"${{ inputs.runs-on }}"'
            }
            core.setOutput('runs-on', runsOn)
            core.setOutput('self-hosted', !hostedRunner)

            // input repository first path part looks like an URL (ex. gcr.io which contains .)
            let imageRegistry = ''
            if ((repoPaths[0] || '').split('.').length > 1) {
              imageRegistry = repoPaths[0]
            }

            let imagePaths = [
              '${{ inputs.repository }}' == '' ? imageRepo : '${{ inputs.repository }}',
              '${{ inputs.image }}' == '' ? imageName : '${{ inputs.image }}',
            ]

            // combine full image path
            core.setOutput('image', imagePaths.join('/'))
            core.setOutput('registry', imageRegistry)

            // autoset username for GCR
            if (imageRegistry.endsWith('gcr.io')) {
              core.setOutput('username', '_json_key')
            } else {
              core.setOutput('username', '${{ inputs.username }}')
            }

            // specify cache directories
            if ('${{ inputs.cache }}' == 'true') {
              core.setOutput('cache-from', 'type=local,src=/tmp/.buildx-cache')
              core.setOutput('cache-to', 'type=local,src=/tmp/.buildx-cache-new')
            }

            // specify metadata version pattern
            if ('${{ inputs.version }}' != '') {
              // vtag
              if ('${{ inputs.version }}'.startsWith('v')) { vtag = 'v' }
              core.setOutput('metadata-version', `type=semver,pattern={{version}},value=${{ inputs.version }},prefix=${vtag}`)
            }

            // found latest tag equals current github.ref, i.e. the latest version
            let latest = "${{ steps.current-tag.outputs.equal == 'true' }}"
            core.setOutput('latest', latest)
            //!js

  build:
    name: Build and Push
    needs: [setup]
    runs-on: ${{ fromJSON(needs.setup.outputs.runs-on) }}

    outputs:
      version: ${{ steps.meta.outputs.version }}
      published: ${{ steps.details.outputs.published }}

    steps:
      -
        uses: actions/checkout@v2
      -
        id: meta
        name: Docker meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ needs.setup.outputs.image }}
          ## disable flavor latest, latest managed by dysnix/find-latest-tag
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ needs.setup.outputs.latest == 'true' && inputs.auto-latest }}
            ${{ needs.setup.outputs.metadata-version }}
            ${{ inputs.metadata-tags }}
            type=sha,prefix=
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        if: inputs.cache
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-buildx-${{ github.event.before }}
      -
        if: needs.setup.outputs.push == 'true' && !inputs.gcloud-auth
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.setup.outputs.registry }}
          username: ${{ needs.setup.outputs.username }}
          password: ${{ secrets.password }}
      -
        if: needs.setup.outputs.push == 'true' && needs.setup.outputs.self-hosted == 'true' && inputs.gcloud-auth
        run: gcloud auth configure-docker --quiet
      -
        id: build
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          push: ${{ needs.setup.outputs.push == 'true' }}
          file: ${{ inputs.file }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ inputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            ${{ inputs.labels }}
          cache-from: ${{ needs.setup.outputs.cache-from }}
          cache-to: ${{ needs.setup.outputs.cache-to }}
          secrets: ${{ secrets.secrets }}
          secret-files: ${{ inputs.secret-files }}
          build-args: ${{ inputs.build-args }}
      -
        id: details
        if: always()
        name: Build details
        uses: actions/github-script@v5
        with:
          script: |
            let published = "${{ steps.build.outcome == 'success' && needs.setup.outputs.push == 'true' }}"
            core.setOutput('published', published)
            core.info(`🏁 published == ${published}`)
            core.info(`🏁 latest == ${{ needs.setup.outputs.latest }}`)
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        if: inputs.cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
